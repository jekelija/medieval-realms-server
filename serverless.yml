# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: medieval-realms
# app and org for use with dashboard.serverless.com
app: medieval-realms
org: jonjekeli

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-finch

custom:
  client:
    bucketName: medieval-realms-frontend
  userTableName: 'users-table-${self:provider.stage}'
  gameTableName: 'games-table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["GamesDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - "arn:aws:dynamodb:us-east-1:386569714631:table/games-table-dev/index/user1-index"
        - "arn:aws:dynamodb:us-east-1:386569714631:table/games-table-dev/index/user2-index"
  environment:
    USERS_TABLE: ${self:custom.userTableName}
    GAMES_TABLE: ${self:custom.gameTableName}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  medieval-realms:
    handler: dist/index.handler
    events:
      - http:
          path: / # this matches the base path
          method: ANY
          cors: true
      - http:
          path: /{proxy+} # this matches any path, the token 'any' doesn't mean anything special
          method: ANY
          cors: true


resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}
    GamesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: gameid
            AttributeType: S
          -
            AttributeName: user1
            AttributeType: S
          -
            AttributeName: user2
            AttributeType: S
        KeySchema:
          -
            AttributeName: gameid
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: user1-index
          KeySchema:
          - AttributeName: user1
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - gameid
            - gamestate
            - user2
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: user2-index
          KeySchema:
          - AttributeName: user2
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - gameid
            - gamestate
            - user1
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.gameTableName}
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
